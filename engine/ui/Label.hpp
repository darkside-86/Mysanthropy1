// Label.hpp
//-----------------------------------------------------------------------------
// Author: darkside-86
// (c) 2019
//-----------------------------------------------------------------------------
// This program is free software : you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.If not, see < https://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------
#pragma once

#include <string>

#include "Color.hpp"
#include "Object.hpp"
#include "ogl/Texture.hpp"
#include "ogl/VertexArray.hpp"
#include "ogl/VertexBuffer.hpp"

namespace engine { namespace ui {

    // Defines a transparent rectangle area containing only opaque or translucent text
    class Label : public Object
    {
    public:
        // Constructor. fontAlias should be alias for a font loaded with engine::TextRenderer. Color is the
        // color of the rendered text.
        Label(Object* parent, const std::string& text, const std::string& fontAlias, const Color& color);
        // Destructor
        virtual ~Label();
        // Render the text in 2D space
        virtual void Render(GraphicsContext& gc) override;
        // Set the text to be rendered and recreate the opengl objects as well as object dimensions
        inline void SetText(const std::string& text) { text_ = text; CreateText(); }
        // Return the text shown as a string
        inline std::string GetText() const { return text_; }
        // Sets the color of the text and updates the opengl objects to reflect changes
        inline void SetColor(const Color& color) { color_ = color; CreateText(); }
        // Returns the color of the text
        inline Color GetColor() const { return color_; }
    private:
        // (Re)creates the opengl objects for rendering
        void CreateText();
        // The text to be displayed
        std::string text_;
        // The font alias
        std::string font_;
        // The color of the text
        Color color_;
        // The opengl objects used to render the text
        ogl::VertexArray* vao_ = nullptr;
        ogl::VertexBuffer* vbo_ = nullptr;
        // The texture generated by the TextRenderer
        ogl::Texture* texture_ = nullptr;
    };

}}